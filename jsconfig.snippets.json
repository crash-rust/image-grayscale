{
  // image-grayscal/.gitignore
  "img-gs:gitignore": {
    "prefix": "img-gs:gitignore",
    "body": [
      "/target",
      "/Cargo.lock",
      "",
      "# Added by cargo",
      "#",
      "# already existing elements were commented out",
      "",
      "#/target",
      "#/Cargo.lock",
      "",
      "**/*/node_modules",
      "",
      "pkg"
    ],
    "description": "image-grayscale/.gitignore"
  },
  // image-grayscale/Cargo.toml
  "img-gs:cargo": {
    "prefix": "img-gs:cargo",
    "body": [
      "[package]",
      "name = \"image-grayscale\"",
      "version = \"0.1.0\"",
      "edition = \"2021\"",
      "",
      "[lib]",
      "crate-type = [\"cdylib\", \"rlib\"]",
      "",
      "[dependencies]",
      "wasm-bindgen = \"0.2.76\"",
      "base64 = \"0.13.0\"",
      "image = \"0.23.14\"",
      "",
      "[dependencies.web-sys]",
      "version = \"0.3.4\"",
      "features = [\"console\"]"
    ],
    "description": "image-grayscale/cargo.toml"
  },
  // image-grayscale/src/lib.rs
  "img-gs:lib": {
    "prefix": "img-gs:lib",
    "body": [
      "use base64::{decode, encode};",
      "use image::{load_from_memory, ImageOutputFormat::Png};",
      "use wasm_bindgen::prelude::*;",
      "use web_sys::console::log_1 as log;",
      "",
      "#[wasm_bindgen]",
      "pub fn grayscale(encoded_file: &str) -> String {",
      "    // 获取source64,转换成二进制文件",
      "    // log(&source.into());",
      "",
      "    let base64_to_vector = decode(encoded_file).unwrap();",
      "    log(&\"decoded\".into());",
      "    // 将二进制文件从内存中读取变成一个动态图像",
      "    let img = load_from_memory(&base64_to_vector).unwrap();",
      "",
      "    //",
      "    let img = img.grayscale();",
      "",
      "    let mut buffer = vec![];",
      "",
      "    img.write_to(&mut buffer, Png).unwrap();",
      "",
      "    let data_url = format!(\"data:image/png;base64,{}\", encode(buffer));",
      "",
      "    data_url",
      "}",
      ""
    ],
    "description": "image-grayscale/src/lib.rs"
  },
  // image-grayscale/www/public/index.html
  "img-gs:tpl": {
    "prefix": "img-gs:tpl",
    "body": [
      "<!DOCTYPE html>",
      "<html>",
      "",
      "<head>",
      "  <meta charset=\"utf-8\">",
      "  <title>基于Rust+Wasm实现图片灰度</title>",
      "  <link href=\"https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css\" rel=\"stylesheet\">",
      "  <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">",
      "  <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>",
      "  <link href=\"https://fonts.googleapis.com/css2?family=Pacifico&display=swap\" rel=\"stylesheet\">",
      "</head>",
      "",
      "<body>",
      "  <div id=\"root\"></div>",
      "</body>",
      "",
      "</html>"
    ],
    "description": "www/public/index.html"
  },
  "img-gs:appless": {
    "prefix": "img-gs:appless",
    "body": [
      "h1 {",
      "  font-family: 'Pacifico', cursive;",
      "}",
      "",
      ".bg {",
      "  animation: slide 3s ease-in-out infinite alternate;",
      "  background-image: linear-gradient(-120deg, #6fc0e3 50%, #347bd1 50%);",
      "}",
      "",
      ".bg:nth-child(2) {",
      "  animation-direction: alternate-reverse;",
      "  animation-duration: 4s;",
      "}",
      "",
      ".bg:nth-child(3) {",
      "  animation-duration: 5s;",
      "}",
      "",
      "@keyframes slide {",
      "  0% {",
      "    transform: translateX(-25%);",
      "  }",
      "",
      "  100% {",
      "    transform: translateX(25%);",
      "  }",
      "}",
      "",
      ".img-container {",
      "  display: flex;",
      "  img {",
      "    width: 50%;",
      "  }",
      "}",
      ""
    ],
    "description": ""
  },
  // image-grayscale/www/src/app.tsx
  "img-gs:apptsx": {
    "prefix": "img-gs:apptsx",
    "body": [
      "import React, { useState, useEffect, useRef } from 'react';",
      "import './app.less';",
      "import { grayscale } from '../pkg';",
      "",
      "const App: React.FC = () => {",
      "  const [source, setSource] = useState<string>('');",
      "  const [graysource, setGraysource] = useState<string>('');",
      "  const [time, setTime] = useState<number>(0);",
      "",
      "  function handleFileChange(e) {",
      "    const fileReader = new FileReader();",
      "    fileReader.readAsDataURL(e.target.files[0]);",
      "    fileReader.onloadend = function (e) {",
      "      setSource(e.target.result);",
      "    };",
      "  }",
      "",
      "  useEffect(() => {",
      "    if (source) {",
      "      let sliceSource = (source as string).replace(",
      "        /^data:image\\/(png|jpeg|jpg);base64,/,",
      "        ''",
      "      );",
      "      let start = new Date().getTime();",
      "      let graySource = grayscale(sliceSource);",
      "      let end = new Date().getTime();",
      "",
      "      setGraysource(graySource);",
      "      setTime(end - start);",
      "      console.log('灰度耗时 =>', end - start);",
      "    }",
      "  }, [source]);",
      "",
      "  return (",
      "    <>",
      "      <div className='bg fixed inset-y-0 -inset-x-2/4 opacity-50 z-0 bg-gradient-to-r from-yellow-400 to-pink-500'></div>",
      "      <div className='bg fixed inset-y-0 -inset-x-2/4 opacity-50 z-0 bg-gradient-to-r from-yellow-400 to-pink-500'></div>",
      "      <div className='bg fixed inset-y-0 -inset-x-2/4 opacity-50 z-0 bg-gradient-to-r from-yellow-400 to-pink-500'></div>",
      "      <div className='flex items-center justify-center h-screen relative z-100'>",
      "        <div className='bg-white bg-opacity-95 border shadow-lg p-10 text-center max-w-2xl'>",
      "          <h1 className='text-4xl mb-8 font-bold'>一起来完成图片灰度吧～</h1>",
      "          <p className='mb-4'></p>",
      "          <label className='bg-green-600 text-white w-full p-6 block cursor-pointer font-bold mb-4'>",
      "            <input",
      "              type='file'",
      "              id='upload'",
      "              accept='.png'",
      "              className='hidden'",
      "              onChange={handleFileChange}",
      "            />",
      "            点击选择图片进行灰度",
      "          </label>",
      "",
      "          {graysource && (",
      "            <>",
      "              <div className='text-3xl mb-8'>",
      "                图片灰度总耗时：{time + '毫秒'}",
      "              </div>",
      "              <div className='img-container'>",
      "                <img id='old-img' src={source} />",
      "                <img id='new-img' src={graysource} />",
      "              </div>",
      "            </>",
      "          )}",
      "        </div>",
      "      </div>",
      "    </>",
      "  );",
      "};",
      "",
      "export default App;",
      ""
    ],
    "description": "www/src/app.tsx"
  },
  // image-grayscale/www/src/index.tsx
  "img-gs:indextsx": {
    "prefix": "img-gs:indextsx",
    "body": [
      "import React from 'react';",
      "import { createRoot } from 'react-dom/client';",
      "import App from './app';",
      "",
      "const root = createRoot(document.querySelector('#root'));",
      "",
      "root.render(<App />);",
      ""
    ],
    "description": "www/src/index.tsx"
  },
  // image-grayscale/www/webpack.config.js
  "img-gs:webpack": {
    "prefix": "img-gs:webpack",
    "body": [
      "const HtmlWebpackPlugin = require('html-webpack-plugin');",
      "const WasmPackPlugin = require('@wasm-tool/wasm-pack-plugin');",
      "const path = require('path');",
      "",
      "function resolve(dir) {",
      "  return path.resolve(__dirname, dir);",
      "}",
      "",
      "module.exports = {",
      "  entry: resolve('src/index.tsx'),",
      "  output: {",
      "    path: resolve('dist'),",
      "    filename: '[name].js'",
      "  },",
      "  resolve: {",
      "    extensions: ['.tsx', '.ts', '.js']",
      "  },",
      "  plugins: [",
      "    new HtmlWebpackPlugin({",
      "      template: resolve('public/index.html'),",
      "      inject: 'body'",
      "    }),",
      "    new WasmPackPlugin({",
      "      crateDirectory: resolve('..'),",
      "      outDir: resolve('../www/pkg')",
      "    })",
      "  ],",
      "  module: {",
      "    rules: [",
      "      {",
      "        test: /\\.ts(x)$/,",
      "        use: ['babel-loader', 'ts-loader']",
      "      },",
      "      {",
      "        test: /\\.css$/,",
      "        use: ['style-loader', 'css-loader']",
      "      },",
      "      {",
      "        test: /\\.less$/,",
      "        use: ['style-loader', 'css-loader', 'less-loader']",
      "      }",
      "    ]",
      "  },",
      "  devtool: 'cheap-module-source-map',",
      "  experiments: {",
      "    asyncWebAssembly: true",
      "  }",
      "};",
      ""
    ],
    "description": "www/webpack.config.js"
  },
  // image-grayscale/www/package.json
  "img-gs:pkgjson": {
    "prefix": "img-gs:pkgjson",
    "body": [
      "{",
      "  \"name\": \"www\",",
      "  \"version\": \"1.0.0\",",
      "  \"description\": \"\",",
      "  \"main\": \"index.js\",",
      "  \"scripts\": {",
      "    \"build\": \"webpack --mode production\",",
      "    \"serve\": \"webpack serve --mode development --open\"",
      "  },",
      "  \"keywords\": [],",
      "  \"author\": \"\",",
      "  \"license\": \"ISC\",",
      "  \"devDependencies\": {",
      "    \"@babel/core\": \"^7.20.2\",",
      "    \"@babel/preset-env\": \"^7.20.2\",",
      "    \"@babel/preset-react\": \"^7.18.6\",",
      "    \"@wasm-tool/wasm-pack-plugin\": \"^1.6.0\",",
      "    \"babel-loader\": \"^9.1.0\",",
      "    \"css-loader\": \"^6.7.2\",",
      "    \"html-webpack-plugin\": \"^5.5.0\",",
      "    \"less\": \"^4.1.3\",",
      "    \"less-loader\": \"^11.1.0\",",
      "    \"style-loader\": \"^3.3.1\",",
      "    \"ts-loader\": \"^9.4.1\",",
      "    \"typescript\": \"^4.9.3\",",
      "    \"webpack\": \"^5.75.0\",",
      "    \"webpack-cli\": \"^4.10.0\",",
      "    \"webpack-dev-server\": \"^4.11.1\"",
      "  },",
      "  \"dependencies\": {",
      "    \"react\": \"^18.2.0\",",
      "    \"react-dom\": \"^18.2.0\"",
      "  }",
      "}",
      ""
    ],
    "description": "www/package.json"
  },
  // image-grayscale/www/.babelrc
  "img-gs:babelrc": {
    "prefix": "img-gs:babelrc",
    "body": [
      "{",
      "  \"presets\": [",
      "    \"@babel/preset-env\",",
      "    \"@babel/preset-react\"",
      "  ]",
      "}"
    ],
    "description": "www/.babelrc"
  },
  // image-grayscale/www/tsconfig.json
  "img-gs:tsconfig": {
    "prefix": "img-gs:tsconfig",
    "body": [
      "{",
      "  \"compilerOptions\": {",
      "    \"jsx\": \"react\",",
      "    \"target\": \"es2016\",",
      "    \"module\": \"ESNext\",",
      "    \"moduleResolution\": \"node\",",
      "    \"sourceMap\": true,",
      "    \"esModuleInterop\": true,",
      "    \"forceConsistentCasingInFileNames\": true,",
      "    \"strict\": true,",
      "    \"noImplicitAny\": false,",
      "    \"strictNullChecks\": false,",
      "    \"strictFunctionTypes\": false,",
      "    \"strictBindCallApply\": false,",
      "    \"strictPropertyInitialization\": false,",
      "    \"noImplicitThis\": false,",
      "    \"useUnknownInCatchVariables\": false,",
      "    \"alwaysStrict\": false,",
      "    \"noUnusedLocals\": false,",
      "    \"noUnusedParameters\": false,",
      "    \"noImplicitReturns\": false,",
      "    \"noFallthroughCasesInSwitch\": false,",
      "    \"noImplicitOverride\": false,",
      "    \"allowUnusedLabels\": true,",
      "    \"allowUnreachableCode\": true,",
      "    \"skipLibCheck\": true",
      "  },",
      "  \"exclude\": [",
      "    \"pkg\"",
      "  ]",
      "}"
    ],
    "description": "www/tsconfig.json"
  }
}